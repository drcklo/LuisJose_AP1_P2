@page "/R_Productos"
@page "/R_Productos/{EntradaID:int?}"
@inject HttpClient httpClient
@inject NotificationService notificationService

<EditForm Model="entradas" OnValidSubmit="Guardar">
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="mb-0">Entradas de productos</h3>
            </div>
            <div class="card-body">
                <label>ID:</label>
                <div class="input-group mb-3">
                    <InputNumber @bind-Value="entradas.EntradaID" class="form-control" aria-describedby="BotonBuscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                </div>
                <div class="mb-3">
                    <label class="form-label">Nombres:</label>
                    <InputDate @bind-Value="entradas.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => entradas.Fecha)" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="Concepto">Concepto:</label>
                    <InputText @bind-Value="entradas.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => entradas.Concepto)" />
                </div>
                <fieldset>
                    <legend>Utilizados</legend>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Producto: </label>
                            <InputSelect @bind-Value="entradasDetalle.ProductoID" class="form-select">
                                <option value="@entradas.ProductoID" hidden="hidden">Seleccione un producto</option>
                                @foreach (var item in L_Productos)
                                {
                                    <option value="@item.ProductoID">@item.Descripción</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => entradasDetalle.ProductoID)" />
                        </div>

                        <div class="col-md-5">
                            <label>Cantidad</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="entradasDetalle.CantidadUtilizada" class="form-control">
                                </InputNumber>
                                <button type="button" class="btn btn-success" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                                <ValidationMessage For="@(() => entradasDetalle.CantidadUtilizada)" />
                            </div>
                        </div>
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Producto ID</th>
                                <th>Descripcion</th>
                                <th>Cantidad</th>
                            </tr>
                        </thead>

                        <tbody>

                            @foreach (var item in this.entradas.entradasDetalle)
                            {
                                <tr>
                                    <td>@item.ProductoID</td>
                                    <td>@GetDescripción(item.ProductoID)</td>
                                    <td>@item.CantidadUtilizada</td>
                                    <td><button type="button" class="btn btn-danger" @onclick=@(() => EliminarDetalle(item))><i class="oi oi-trash" /></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="row d-flex justify-content-center">
                        <div class="col-md">
                            <label>Total:</label>
                            <input disabled @bind-value="Total" class="form-control" />
                        </div>
                    </div>
                </fieldset>
                <hr>
                <fieldset>
                    <legend>Producido</legend>
                    <div class="row">
                        <div class="col-3">
                            <select @bind="entradas.ProductoID" class="form-control">
                                @foreach (var item in L_Productos)
                                {
                                    <option value="@item.ProductoID">@item.Descripción</option>
                                }
                            </select>
                        </div>

                        <div class="col-2">
                            <input @bind-value="entradas.CantidadProducida" disabled class="form-control" placeholder="Cantidad Producida" />
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-primary" @onclick="Limpiar">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code
{
    [Parameter]
    public Entradas entradas { get; set; } = new Entradas();
    public Productos productos { get; set; } = new Productos();
    public EntradasDetalle entradasDetalle { get; set; } = new EntradasDetalle();
    public List<Productos> L_Productos { get; set; } = new List<Productos>();
    public int EntradaId { get; set; }
    public int Total { get; set; } = 0;
    public int Cantidad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (productos is not null)
        {
            L_Productos = productos;
        }

        if (EntradaId > 0)
        {
            this.entradas.EntradaID = EntradaId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        Total = 0;
    }

    public void Limpiar()
    {
        this.entradas = new Entradas();
        Total = 0;
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Nuevo Ejecutado",
                Detail = "Campos limipiados correctamente",
                Duration = 4_000
            };
        notificationService.Notify(mensaje);
    }

    public async Task<bool> Buscar()
    {
        try
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaID}");

            if (entradaEncontrada != null)
            {
                int Suma = 0;
                this.entradas = entradaEncontrada;
                this.entradas.entradasDetalle = entradaEncontrada.entradasDetalle.ToList();

                foreach (var item in entradas.entradasDetalle)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }

                StateHasChanged();
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Bien!",
                        Detail = "Su valor ha sido encontrado",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Vaya...",
                    Detail = "Al parecer esa entrada no existe",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
    }

    private async Task<Productos> BuscarEntradas(int ProductoID)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoID}");

        if (producto == null)
        {
            return new Productos();
        }

        return producto;
    }

    public bool Validar()
    {
        if (string.IsNullOrEmpty(entradas.Concepto))
        {
            return false;
        }
        if (entradas.ProductoID < 0)
        {
            return false;
        }
        if (entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if (entradasDetalle.ProductoID < 0)
        {
            return false;
        }
        if (entradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        entradas.entradasDetalle = this.entradas.entradasDetalle.ToList();
        using var response = await httpClient.PostAsJsonAsync("api/Entradas", entradas);

        if (Validar())
        {
            if (response.IsSuccessStatusCode)
            {
                var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

                if (entradaDevuelta is not null)
                {
                    this.entradas = entradaDevuelta;
                    Nuevo();
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito",
                            Detail = "Su producto ha sido guardado",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);

                }
                else
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Algo ha salido mal",
                            Detail = "No puedes guardar con campos vacíos",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Algo ha salido mal",
                        Detail = "Su entrada no fue valida, intente de nuevo",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
            }
        }
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaID}");

        if (Validar())
        {
            if (!response.IsSuccessStatusCode)
            {

                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al eliminar",
                        Detail = "No hay productos a eliminar",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
            else
            {
                Nuevo();
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Eliminado con exito",
                        Detail = "El producto fue eliminado con exito",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
            }
        }
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            if (entradasDetalle.CantidadUtilizada <= 0)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Valor no posible",
                        Detail = "La cantidad deseada debe ser mayor a 0",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }

            var producto = await BuscarEntradas(entradasDetalle.ProductoID);

            if (entradas != null)
            {
                int Suma = 0;

                if (entradasDetalle.CantidadUtilizada > producto.Existencia)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "No disponible",
                            Detail = "La cantidad que quiere de este producto no está disponible",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }

                entradasDetalle.EntradaID = entradas.EntradaID;
                entradas.entradasDetalle.Add(entradasDetalle);
                entradasDetalle = new EntradasDetalle();

                foreach (var item in entradas.entradasDetalle)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }
                entradas.CantidadProducida = Total * 2;
            }
        }
    }

    public void EliminarDetalle(EntradasDetalle detalle)
    {
        this.entradas.entradasDetalle.Remove(detalle);

        Total = this.entradas.entradasDetalle.Sum(t => t.CantidadUtilizada);
        entradas.CantidadProducida = Total * 2;
    }

    public string GetDescripción(int Id)
    {
        return L_Productos.Where(p => p.ProductoID == Id).FirstOrDefault().Descripción;
    }
}